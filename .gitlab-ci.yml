variables:
  # Act as a varibale to be used further in YML file.
  TARGET_FOLDER_NAME: "target"
  BACKEND_FOLDER_NAME: "server"
  FRONTEND_FOLDER_NAME: "FrontEnd"

stages:
  - build
  - test
  - deploy

backend-build:
  stage: build
  tags:
    - dalfcs_docker_autoscale
  image: node:latest
  script:
    - ls
    - echo "Started building backend application."
    - cd server
    - npm install
    - npm run build
    - echo "Backend application has been built successfully."
  # rules:
  #   - changes:
  #       - server/**/*
  artifacts:
    when: on_success
    paths:
      - $TARGET_FOLDER_NAME

backend-test:
  stage: test
  tags:
    - dalfcs_docker_autoscale
  image: node:latest
  script:
    - ls
    - echo "Backend application test started."
    - cd server
    - npm run test
    - echo "Backend application Tested successfully."
  # rules:
  #   - changes:
  #       - server/**/*

backend-publish-deploy:
  stage: deploy
  image: node:latest
  tags:
    - dalfcs_docker_autoscale
  before_script:
    - apt-get update && apt-get install -y zip
    - apt-get install sshpass
  script:
    - ls
    - cd server
    - ls
    - chmod og-rwx ${VM_PRIVATE_KEY}
    - cd ../
    - zip -r server.zip server
    - sshpass -V    
    - export SSHPASS=${VM_PASS}
    - sshpass -e scp -o StrictHostKeyChecking=no 
    - sshpass -e scp -o StrictHostKeyChecking=no -i ${VM_PRIVATE_KEY} server.zip csci5308vm5@csci5308vm5.research.cs.dal.ca:${BACKEND_FOLDER_NAME}/server.zip
  only:
    refs:
      - deployment




frontend-publish-deploy:
  stage: deploy
  before_script:
    - apt-get update && apt-get install -y zip
  tags:
    - dalfcs_docker_autoscale
  script:
    - chmod og-rwx ${VM_PRIVATE_KEY}
    - zip -r FrontEnd.zip FrontEnd
    - scp -r -o StrictHostKeyChecking=no -i ${VM_PRIVATE_KEY} FrontEnd.zip csci5308vm5@csci5308vm5.research.cs.dal.ca:${FRONTEND_FOLDER_NAME}/FrontEnd.zip
    - ssh -i ${VM_PRIVATE_KEY} csci5308vm5@csci5308vm5.research.cs.dal.ca "cd ${FRONTEND_FOLDER_NAME}; ./start_frontend.sh"
  only:
    refs:
      - deployment


# image: node:latest
# stages:          # List of stages for jobs, and their order of execution
#   - build
#   - test

# build:       # This job runs in the build stage, which runs first.
#   stage: build
#   tags:
#   - dalfcs_docker_autoscale
#   script:
#   - cd ./server/
#   - npm install
#   - npm run build


# test:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#   - cd ./server/  
#   - npm run test
